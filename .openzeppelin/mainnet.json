{
  "manifestVersion": "3.1",
  "impls": {
    "0236c37c970548175a40fe52721bc68415db2e347864d721ab9e1669526c9d6e": {
      "address": "0xDD1680c6D1190DF4e8AE5eD0D15803600e5f486A",
      "txHash": "0x2c7db4bcda3fd900109376a77b2030a07e8352582603a35236766c6f1f1580bb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "openzeppelin/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "openzeppelin/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "openzeppelin/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "openzeppelin/GSN/Context.sol:39"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)2037_storage)",
            "src": "openzeppelin/access/AccessControl.sol:59"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "openzeppelin/access/AccessControl.sol:211"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "openzeppelin/token/ERC20/ERC20.sol:38"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "openzeppelin/token/ERC20/ERC20.sol:40"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "openzeppelin/token/ERC20/ERC20.sol:42"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "openzeppelin/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "openzeppelin/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "openzeppelin/token/ERC20/ERC20.sol:46"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "openzeppelin/token/ERC20/ERC20.sol:318"
          },
          {
            "contract": "ERC20BurnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "openzeppelin/token/ERC20/ERC20Burnable.sol:54"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "openzeppelin/utils/Pausable.sol:27"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "openzeppelin/utils/Pausable.sol:85"
          },
          {
            "contract": "ERC20PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "openzeppelin/token/ERC20/ERC20Pausable.sol:40"
          },
          {
            "contract": "ERC20PresetMinterPauserUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "openzeppelin/presets/ERC20PresetMinterPauser.sol:102"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)2037_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          }
        }
      }
    },
    "abb6dd8af66e1314cf13510d14289bfaa3f2bb2397cf3659f4a2e1f2cd11acdc": {
      "address": "0x65C0DfBB89a35e3e514e0B02eca34aC2E3BBf7EF",
      "txHash": "0x88ec5bec970a145aac46d106a170c182eb7d42c0482402f57e19aaddd4567588",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "openzeppelin/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "openzeppelin/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "openzeppelin/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "openzeppelin/GSN/Context.sol:39"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "openzeppelin/access/Ownable.sol:19"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "openzeppelin/access/Ownable.sol:79"
          },
          {
            "contract": "LockUpPool",
            "label": "PENALTY_RATE",
            "type": "t_uint256",
            "src": "LockUpPool.sol:16"
          },
          {
            "contract": "LockUpPool",
            "label": "PLATFORM_FEE_RATE",
            "type": "t_uint256",
            "src": "LockUpPool.sol:17"
          },
          {
            "contract": "LockUpPool",
            "label": "SECONDS_IN_MONTH",
            "type": "t_uint256",
            "src": "LockUpPool.sol:18"
          },
          {
            "contract": "LockUpPool",
            "label": "emergencyMode",
            "type": "t_bool",
            "src": "LockUpPool.sol:20"
          },
          {
            "contract": "LockUpPool",
            "label": "tokenStats",
            "type": "t_mapping(t_address,t_struct(TokenStats)140_storage)",
            "src": "LockUpPool.sol:54"
          },
          {
            "contract": "LockUpPool",
            "label": "pools",
            "type": "t_array(t_address)dyn_storage",
            "src": "LockUpPool.sol:57"
          },
          {
            "contract": "LockUpPool",
            "label": "userLockUps",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserLockUp)119_storage))",
            "src": "LockUpPool.sol:60"
          },
          {
            "contract": "LockUpPool",
            "label": "fundAddress",
            "type": "t_address",
            "src": "LockUpPool.sol:63"
          },
          {
            "contract": "LockUpPool",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "LockUpPool.sol:313"
          },
          {
            "contract": "WRNRewardPool",
            "label": "WRNToken",
            "type": "t_contract(ERC20PresetMinterPauserUpgradeSafe)2869",
            "src": "WRNRewardPool.sol:12"
          },
          {
            "contract": "WRNRewardPool",
            "label": "REWARD_START_BLOCK",
            "type": "t_uint256",
            "src": "WRNRewardPool.sol:15"
          },
          {
            "contract": "WRNRewardPool",
            "label": "REWARD_END_BLOCK",
            "type": "t_uint256",
            "src": "WRNRewardPool.sol:16"
          },
          {
            "contract": "WRNRewardPool",
            "label": "REWARD_EARLY_BONUS_END_BLOCK",
            "type": "t_uint256",
            "src": "WRNRewardPool.sol:17"
          },
          {
            "contract": "WRNRewardPool",
            "label": "REWARD_PER_BLOCK",
            "type": "t_uint256",
            "src": "WRNRewardPool.sol:18"
          },
          {
            "contract": "WRNRewardPool",
            "label": "REWARD_EARLY_BONUS_BOOST",
            "type": "t_uint256",
            "src": "WRNRewardPool.sol:19"
          },
          {
            "contract": "WRNRewardPool",
            "label": "totalMultiplier",
            "type": "t_uint256",
            "src": "WRNRewardPool.sol:21"
          },
          {
            "contract": "WRNRewardPool",
            "label": "wrnStats",
            "type": "t_mapping(t_address,t_struct(WRNStats)1166_storage)",
            "src": "WRNRewardPool.sol:34"
          },
          {
            "contract": "WRNRewardPool",
            "label": "userWRNRewards",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserWRNReward)1171_storage))",
            "src": "WRNRewardPool.sol:37"
          },
          {
            "contract": "WRNRewardPool",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "WRNRewardPool.sol:239"
          }
        ],
        "types": {
          "t_contract(ERC20PresetMinterPauserUpgradeSafe)2869": {
            "label": "contract ERC20PresetMinterPauserUpgradeSafe"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(WRNStats)1166_storage)": {
            "label": "mapping(address => struct WRNRewardPool.WRNStats)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserWRNReward)1171_storage))": {
            "label": "mapping(address => mapping(address => struct WRNRewardPool.UserWRNReward))"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(TokenStats)140_storage)": {
            "label": "mapping(address => struct LockUpPool.TokenStats)"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserLockUp)119_storage))": {
            "label": "mapping(address => mapping(address => struct LockUpPool.UserLockUp))"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  },
  "admin": {
    "address": "0xaB4bb2A2036fB145892f544E4989175E383d13a9",
    "txHash": "0x095ab49eed7d39c4a160812789f64ceba8d0723793feb3e682d01c4dbeb076f2"
  }
}
